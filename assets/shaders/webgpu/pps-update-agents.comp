#version 450

#define NUM_AGENTS 8192
#define WORKGROUP_SIZE 32
#define TWO_PI 6.28318530718

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

struct Agent {
  vec3 position;
  float rotation;
};

struct ForceAccumulator {
  float neighbors;
  float direction;
};

layout(std140, set = 0, binding = 0) uniform PpsParams {
  float speed;
  float neighborhoodRadius;
  float globalRotation;
  float localRotation;
};

layout(std140, set = 0, binding = 2) buffer InForces {
  ForceAccumulator forces[NUM_AGENTS];
};

layout(std140, set = 0, binding = 1) buffer OutAgents {
  // NOTE: Something weird goes on if you write to a structured buffer.
  //       Seems like it gets compiled as a uniform rather than a rw buffer?
  vec4 agents[NUM_AGENTS];
};

Agent unpackAgent(vec4 data) {
  return Agent(data.xyz, data.w);
}

vec4 packAgent(Agent agent) {
  return vec4(agent.position, agent.rotation);
}

vec3 wrapPosition(vec3 position) {
  vec3 dims = vec3(2, 2, 0);
  vec3 halfDims = dims * 0.5;

  return mod(position + halfDims, dims) - halfDims;
}

void main() {
  uint selfIndex = gl_GlobalInvocationID.x;
  ForceAccumulator forceAccum = forces[selfIndex];
  Agent self = unpackAgent(agents[selfIndex]);
  vec3 selfHeading = vec3(cos(self.rotation), sin(self.rotation), 0);

  self.position = wrapPosition(self.position + speed * selfHeading);
  self.rotation = mod(self.rotation + globalRotation + localRotation * forceAccum.neighbors * sign(forceAccum.direction), TWO_PI);
  agents[selfIndex] = packAgent(self);
}
